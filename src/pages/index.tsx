import Head from 'next/head'
import {Inter} from 'next/font/google'
import {useRef, useState} from "react";
import Spinner from "@/components/Spinner";
import {IoMdRemove} from "react-icons/io"
import {CiCircleRemove} from "react-icons/ci"

const inter = Inter({subsets: ['latin']})

export default function Home() {

  const [topic, setTopic] = useState("")
  const [sentence, setSentence] = useState("")
  const [sentenceLoading, setSentenceLoading] = useState(false);
  const [mood, setMood] = useState("")
  const [words, setWords] = useState<string[]>([])
  const [word, setWord] = useState<string>("")

  const sentenceRef = useRef<null | HTMLDivElement>(null);

  const scrollToSentence = () => {
    if (sentenceRef.current !== null) {
      sentenceRef.current?.scrollIntoView({behavior: "smooth"});
    }
  };

  const prompt = `Write a sentence based on the following topics, written in the following mood, containing the following words or phrases.\n
    Topic: ${topic}\n
    Mood: ${mood} \n
    Words or Phrases: ${words.join(",")}\n
    Short Essay:`;

  const generateSentence = async (e: any) => {
    e.preventDefault();
    setSentence("");
    setSentenceLoading(true);
    const response = await fetch("/api/getSentence", {
      method: "POST", headers: {
        "Content-Type": "application/json",
      }, body: JSON.stringify({
        prompt,
      }),
    });

    if (!response.ok) {
      throw new Error(response.statusText);
    }

    // This data is a ReadableStream
    const data = response.body;
    if (!data) {
      return;
    }

    const reader = data.getReader();
    const decoder = new TextDecoder();
    let done = false;

    while (!done) {
      const {value, done: doneReading} = await reader.read();
      done = doneReading;
      const chunkValue = decoder.decode(value);
      setSentence((prev) => prev + chunkValue);
    }
    scrollToSentence();
    setSentenceLoading(false);
    console.log(sentence)
  };

  return (<>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <div className="w-screen min-h-screen flex justify-center py-4 md:items-center">
        <div className="flex flex-col items-center w-full px-4 md:w-1/2">
          <p className="text-4xl font-bold mb-4">Generate a Sentence</p>
          <input type="text" onChange={(e) => setTopic(e.currentTarget.value)} placeholder="Topic..."
                 className="input input-bordered input-success w-full mb-4"/>
          <select className="select select-success w-full mb-4" onChange={(e) => {
            setMood(e.currentTarget.value)
          }}>
            <option disabled selected>Pick a Mood</option>
            <option>Romantic</option>
            <option>Classy</option>
            <option>Mystery</option>
            <option>Horror</option>
          </select>
          <div className="flex w-full" >
            <input type="text" value={word} onChange={(e) => setWord(e.currentTarget.value)} placeholder="Include words..."
                   className="input input-bordered input-success w-full mb-4 mr-2"/>
            <button onClick={() => { setWords((prev) => [...prev, word]); setWord('')}} type="button" className="btn btn-success w-1/4">Add</button>
          </div>
          <div className="flex flex-wrap w-full mb-4">
            {words && words.map((word, index) => (<div key={index} className="relative px-6 py-4 bg-gray-200 rounded-lg mr-2 mb-2">
              <button onClick={() => {
                const copy = words.filter((curr, index) => curr != word);
                setWords(copy)
              }} className="absolute top-1 right-1 "><CiCircleRemove/></button>
                <p>{word}</p>
              </div>))}
          </div>
          <button className="btn btn-primary w-full mb-8" onClick={(e) => generateSentence(e)}>
            {sentenceLoading ? <Spinner/> : <p>Generate sentence &rarr;</p>}
          </button>
          {sentence && (<>
              <div>
                <h2
                  className="sm:text-4xl text-3xl font-bold text-slate-900 mx-auto mb-2"
                  ref={sentenceRef}
                >
                  Your sentence
                </h2>
              </div>
              <div className="space-y-8 flex flex-col items-center justify-center max-w-xl mx-auto">
                {sentence
                  .substring(sentence.indexOf("0") + 1)
                  .split("2.")
                  .map((generatedSentence) => {
                    return (<div
                        className="bg-white rounded-xl shadow-md p-4 hover:bg-gray-100 transition cursor-copy border"
                        onClick={() => {
                          navigator.clipboard.writeText(sentence);
                        }}
                        key={generatedSentence}
                      >
                        <p>{generatedSentence}</p>
                      </div>);
                  })}
              </div>
            </>)}
        </div>
      </div>
    </>)
}
